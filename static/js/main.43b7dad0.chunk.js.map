{"version":3,"sources":["image/sunny.gif","image/ranny.gif","component/WeatherApp.jsx","App.js","index.js"],"names":["WeatherApp","authorization","useState","locationName","temp","humd","chanceOfRain","description","maxT","minT","hour","min","currentWeather","setCurrentWeather","useEffect","fetchData","a","console","log","currentWeatherPromise","fetchCurrentWeather","weatherPredictionPromise","fetchWeatherPrediction","Promise","all","weatherPrediction","url","axios","get","then","respose","target","data","records","location","find","parseFloat","weatherElement","e","elementName","elementValue","time","obsTime","split","response","obj","parameter","parameterName","className","src","includes","parseInt","isRanny","ranny","sunny","alt","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43b7dad0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sunny.4448adac.gif\";","export default __webpack_public_path__ + \"static/media/ranny.b3b51090.gif\";","import axios from 'axios';\r\nimport React, { useState, useEffect } from 'react';\r\nimport './WeatherApp.css'\r\nimport sunny from '../image/sunny.gif';\r\nimport ranny from '../image/ranny.gif';\r\n\r\nconst WeatherApp = () => {\r\n    const authorization = \"CWB-52F9DCE3-BDF3-49E6-81A5-32A4AFDC7460\";\r\n    const [currentWeather, setCurrentWeather] = useState({\r\n        locationName: \"NaN\",\r\n        temp: \"0\", // 溫度\r\n        humd: \"0\", // 相對濕度\r\n        chanceOfRain: \"0\", //降雨機率\r\n        description: \"NaN\", // 天氣狀態\r\n        maxT: \"\", // 最高溫度\r\n        minT: \"\", // 最低溫度\r\n        hour: \"00\", // 最後觀測時間 ( 小時 )\r\n        min: \"00\" // 最後觀測時間 ( 分鐘 )\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    const fetchData = async () => {\r\n        console.log('fetch');\r\n        const currentWeatherPromise = fetchCurrentWeather();\r\n        const weatherPredictionPromise = fetchWeatherPrediction();\r\n        const [currentWeather, weatherPrediction] = await Promise.all([\r\n            currentWeatherPromise,\r\n            weatherPredictionPromise\r\n        ]);\r\n        if (currentWeather.temp === \"NaN\") {\r\n            currentWeather.temp = `${weatherPrediction.minT}~${weatherPrediction.maxT}`;\r\n        }\r\n        setCurrentWeather({\r\n            ...currentWeather,\r\n            ...weatherPrediction\r\n        });\r\n    };\r\n\r\n    const fetchCurrentWeather = () => {\r\n        const url = `https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${authorization}`;\r\n        return axios.get(url)\r\n            .then(respose => {\r\n                const locationName = \"淡水\";\r\n                const target = respose.data.records.location.find(data => data.locationName === locationName);\r\n                let temp = parseFloat(target.weatherElement.find(e => e.elementName === \"TEMP\").elementValue);\r\n                let humd = parseFloat(target.weatherElement.find(e => e.elementName === \"HUMD\").elementValue)*100;\r\n                const time = target.time.obsTime.split(' ')[1];\r\n                const hour = time.split(':')[0];\r\n                const min = time.split(':')[1];\r\n                temp = temp < -50 ? \"NaN\" : temp;\r\n                humd = humd < -50 ? \"NaN\" : humd;\r\n                return {\r\n                    locationName,\r\n                    temp,\r\n                    humd,\r\n                    hour,\r\n                    min\r\n                };\r\n            });\r\n    };\r\n\r\n    const fetchWeatherPrediction = () => {\r\n        const url = `https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${authorization}`;\r\n        return axios.get(url)\r\n            .then(response => {\r\n                const locationName = \"新北市\";\r\n                const data = response.data.records.location.find(obj => obj.locationName === locationName);\r\n                const description = data.weatherElement.find(e => e.elementName === 'Wx').time[0].parameter.parameterName;\r\n                const chanceOfRain = data.weatherElement.find(e => e.elementName === 'PoP').time[0].parameter.parameterName;\r\n                const maxT = data.weatherElement.find(e => e.elementName === 'MaxT').time[0].parameter.parameterName;\r\n                const minT = data.weatherElement.find(e => e.elementName === 'MinT').time[0].parameter.parameterName;\r\n                return {\r\n                    description,\r\n                    chanceOfRain,\r\n                    maxT,\r\n                    minT\r\n                };\r\n            });\r\n    }\r\n\r\n    const isRanny = () => {\r\n        const description = currentWeather.description;\r\n        const chanceOfRain = currentWeather.chanceOfRain;\r\n        if (description.includes('雨') || parseInt(chanceOfRain) > 80) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <h3>{currentWeather.locationName}</h3>\r\n            <div>{currentWeather.description}</div>\r\n            <div className=\"main\">\r\n                <div className=\"temp\">{currentWeather.temp}<span>°C</span></div>\r\n                <img src={isRanny() ? ranny : sunny} alt=\"weather icon\" className=\"weatherIcon\"/>\r\n            </div>\r\n            <div className=\"weatherElement\">\r\n                <div>相對溼度: {currentWeather.humd}%</div>\r\n                <div>降雨機率: {currentWeather.chanceOfRain}%</div>\r\n            </div>\r\n            <div className=\"refresh\">\r\n                <span>最後觀測時間: {currentWeather.hour}:{currentWeather.min}</span>\r\n            </div>   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherApp; ","import './App.css';\r\nimport WeatherApp from './component/WeatherApp';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <WeatherApp/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}