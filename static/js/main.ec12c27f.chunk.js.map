{"version":3,"sources":["image/refresh.jpg","image/sunny.gif","image/ranny.gif","component/WeatherApp.jsx","App.js","index.js"],"names":["WeatherApp","authorization","useState","locationName","temp","humd","chanceOfRain","description","maxT","minT","currentWeather","setCurrentWeather","useEffect","fetchData","a","Promise","all","fetchCurrentWeather","fetchWeatherPrediction","weatherPrediction","url","axios","get","then","respose","target","data","records","location","find","parseFloat","weatherElement","e","elementName","elementValue","response","obj","time","parameter","parameterName","className","src","includes","ranny","sunny","alt","onClick","refresh","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAAe,G,MAAA,IAA0B,qCCA1B,MAA0B,kCCA1B,MAA0B,kC,OCwG1BA,EAjGI,WACf,IAAMC,EAAgB,2CACtB,EAA4CC,mBAAS,CACjDC,aAAc,MACdC,KAAM,IACNC,KAAM,IACNC,aAAc,IACdC,YAAa,MACbC,KAAM,GACNC,KAAM,KAPV,mBAAOC,EAAP,KAAuBC,EAAvB,KAUAC,qBAAU,WACN,IAAMC,EAAS,uCAAG,kCAAAC,EAAA,sEACoCC,QAAQC,IAAI,CAC1DC,IACAC,MAHU,mCACPR,EADO,KACSS,EADT,KAKc,QAAxBT,EAAeN,OACfM,EAAeN,KAAf,UAAyBe,EAAkBV,KAA3C,YAAmDU,EAAkBX,OAEzEG,EAAkB,2BACXD,GACAS,IAVO,2CAAH,qDAcfN,MACD,IAEH,IAAMI,EAAsB,WACxB,IAAMG,EAAG,sFAAkFnB,GAC3F,OAAOoB,IAAMC,IAAIF,GACZG,MAAK,SAAAC,GACF,IACMC,EAASD,EAAQE,KAAKC,QAAQC,SAASC,MAAK,SAAAH,GAAI,MADjC,iBACqCA,EAAKvB,gBAC3DC,EAAO0B,WAAWL,EAAOM,eAAeF,MAAK,SAAAG,GAAC,MAAsB,SAAlBA,EAAEC,eAAwBC,cAC5E7B,EAA0F,IAAnFyB,WAAWL,EAAOM,eAAeF,MAAK,SAAAG,GAAC,MAAsB,SAAlBA,EAAEC,eAAwBC,cAGhF,MAAO,CACH/B,aAPiB,eAQjBC,KAJJA,EAAOA,GAAQ,GAAK,MAAQA,EAKxBC,KAJJA,EAAOA,GAAQ,GAAK,MAAQA,OASlCa,EAAyB,WAC3B,IAAME,EAAG,sFAAkFnB,GAC3F,OAAOoB,IAAMC,IAAIF,GACZG,MAAK,SAAAY,GACF,IACMT,EAAOS,EAAST,KAAKC,QAAQC,SAASC,MAAK,SAAAO,GAAG,MAD/B,uBACmCA,EAAIjC,gBAK5D,MAAO,CACHI,YALgBmB,EAAKK,eAAeF,MAAK,SAAAG,GAAC,MAAsB,OAAlBA,EAAEC,eAAsBI,KAAK,GAAGC,UAAUC,cAMxFjC,aALiBoB,EAAKK,eAAeF,MAAK,SAAAG,GAAC,MAAsB,QAAlBA,EAAEC,eAAuBI,KAAK,GAAGC,UAAUC,cAM1F/B,KALSkB,EAAKK,eAAeF,MAAK,SAAAG,GAAC,MAAsB,SAAlBA,EAAEC,eAAwBI,KAAK,GAAGC,UAAUC,cAMnF9B,KALSiB,EAAKK,eAAeF,MAAK,SAAAG,GAAC,MAAsB,SAAlBA,EAAEC,eAAwBI,KAAK,GAAGC,UAAUC,mBAkBnG,OACI,sBAAKC,UAAU,OAAf,UACI,6BAAK9B,EAAeP,eACpB,8BAAMO,EAAeH,cACrB,sBAAKiC,UAAU,OAAf,UACI,sBAAKA,UAAU,OAAf,UAAuB9B,EAAeN,KAAK,4CAC3C,qBAAKqC,IAdD,WACZ,IAAMlC,EAAcG,EAAeH,YACnC,SAAIA,EAAYmC,SAAS,YAAQnC,EAAYmC,SAAS,YAY1BC,EAAQC,EAAOC,IAAI,eAAeL,UAAU,mBAEpE,sBAAKA,UAAU,iBAAf,UACI,6DAAY9B,EAAeL,KAA3B,OACA,6DAAYK,EAAeJ,aAA3B,UAEJ,qBAAKkC,UAAU,UAAUM,QAAS,WAC9B7B,IACAC,KAFJ,SAII,qBAAKuB,IAAKM,EAASF,IAAI,UAAUL,UAAU,sBCvF5CQ,MARf,WACE,OACE,qBAAKR,UAAU,MAAf,SACE,cAAC,EAAD,OCDNS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ec12c27f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/refresh.9c0da300.jpg\";","export default __webpack_public_path__ + \"static/media/sunny.469a1d1b.gif\";","export default __webpack_public_path__ + \"static/media/ranny.3514cb41.gif\";","import axios from 'axios';\r\nimport React, { useState, useEffect } from 'react';\r\nimport './WeatherApp.css'\r\nimport refresh from '../image/refresh.jpg';\r\nimport sunny from '../image/sunny.gif';\r\nimport ranny from '../image/ranny.gif';\r\n\r\nconst WeatherApp = () => {\r\n    const authorization = \"CWB-52F9DCE3-BDF3-49E6-81A5-32A4AFDC7460\";\r\n    const [currentWeather, setCurrentWeather] = useState({\r\n        locationName: \"NaN\",\r\n        temp: \"0\", // 溫度\r\n        humd: \"0\", // 相對濕度\r\n        chanceOfRain: \"0\", //降雨機率\r\n        description: \"NaN\", // 天氣狀態\r\n        maxT: \"\", // 最高溫度\r\n        minT: \"\" // 最低溫度\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const [currentWeather, weatherPrediction] = await Promise.all([\r\n                fetchCurrentWeather(),\r\n                fetchWeatherPrediction()\r\n            ]);\r\n            if (currentWeather.temp === \"NaN\") {\r\n                currentWeather.temp = `${weatherPrediction.minT}~${weatherPrediction.maxT}`;\r\n            }\r\n            setCurrentWeather({\r\n                ...currentWeather,\r\n                ...weatherPrediction\r\n            });\r\n        };\r\n        \r\n        fetchData();\r\n    }, []);\r\n\r\n    const fetchCurrentWeather = () => {\r\n        const url = `https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${authorization}`;\r\n        return axios.get(url)\r\n            .then(respose => {\r\n                const locationName = \"淡水\";\r\n                const target = respose.data.records.location.find(data => data.locationName === locationName);\r\n                let temp = parseFloat(target.weatherElement.find(e => e.elementName === \"TEMP\").elementValue);\r\n                let humd = parseFloat(target.weatherElement.find(e => e.elementName === \"HUMD\").elementValue)*100;\r\n                temp = temp < -50 ? \"NaN\" : temp;\r\n                humd = humd < -50 ? \"NaN\" : humd;\r\n                return {\r\n                    locationName,\r\n                    temp,\r\n                    humd\r\n                };\r\n            });\r\n    };\r\n\r\n    const fetchWeatherPrediction = () => {\r\n        const url = `https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${authorization}`;\r\n        return axios.get(url)\r\n            .then(response => {\r\n                const locationName = \"新北市\";\r\n                const data = response.data.records.location.find(obj => obj.locationName === locationName);\r\n                const description = data.weatherElement.find(e => e.elementName === 'Wx').time[0].parameter.parameterName;\r\n                const chanceOfRain = data.weatherElement.find(e => e.elementName === 'PoP').time[0].parameter.parameterName;\r\n                const maxT = data.weatherElement.find(e => e.elementName === 'MaxT').time[0].parameter.parameterName;\r\n                const minT = data.weatherElement.find(e => e.elementName === 'MinT').time[0].parameter.parameterName;\r\n                return {\r\n                    description,\r\n                    chanceOfRain,\r\n                    maxT,\r\n                    minT\r\n                };\r\n            });\r\n    }\r\n\r\n    const isRanny = () => {\r\n        const description = currentWeather.description;\r\n        if (description.includes('雨') || description.includes('陰')) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <h3>{currentWeather.locationName}</h3>\r\n            <div>{currentWeather.description}</div>\r\n            <div className=\"main\">\r\n                <div className=\"temp\">{currentWeather.temp}<span>°C</span></div>\r\n                <img src={isRanny ? ranny : sunny} alt=\"weather icon\" className=\"weatherIcon\"/>\r\n            </div>\r\n            <div className=\"weatherElement\">\r\n                <div>相對溼度: {currentWeather.humd}%</div>\r\n                <div>降雨機率: {currentWeather.chanceOfRain}%</div>\r\n            </div>\r\n            <div className=\"refresh\" onClick={() => {\r\n                fetchCurrentWeather();\r\n                fetchWeatherPrediction();\r\n            }}>\r\n                <img src={refresh} alt=\"refresh\" className=\"refreshIcon\"/>\r\n            </div>   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherApp; ","import './App.css';\nimport WeatherApp from './component/WeatherApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherApp/>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}